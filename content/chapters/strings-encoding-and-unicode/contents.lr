_model: chapter
---
title: Strings, Encoding and Unicode
---
abstract: Before diving into typesetting, we should have clear in mind how computers deal with text
---
sort_key: 9
---
visual_abstract: abstract-8.svg
---
og_image: abstract-8.png
---
body:

#### image ####
name: textfile.gif
----
class: small-image
----
#### text-block ####
content: Since the advent of personal computers and desktop publishing, more and more people typeset fonts on a screen. This practice was once confined to a professional category. Nowadays typesetting is ubiquitous. It is so widespread that writing and typesetting are almost considered the same thing. The differences between the two realms are important and a visual designer should be aware of them.

A broad notion of Writing (do not mistake Calligraphy for Writing) could be considered the visual arrangement of language on a support to convey meaning. It is indeed a very broad definition. Somehow, even performative arts fit it. Writing implies the use of any tool on any kind of surface, as long as it arranges visual language. What about Braille notation? That is Writing too, but it is a bit out of the scope of this manual.

The definition of Typography is narrower. Typography is the arrangement of visual language using elements especially designed for reproduction and reuse: types. These types can be made of lead, film, bytes. It doesn’t matter as long as they are prefabricated. So, Typography is definitely a subset of Writing. Calligraphy or Lettering are other subsets of Writing and they share with Typography the fact that they all deal with letter shapes, but in very different ways.
----
#### image ####
name: writing.svg
----
class: large-image
----
#### section-title ####
content: The Invention of Movable Type
----
class: default
----
#### image ####
name: vectorVSpixel.svg
----
class: small-image
----
#### text-block ####
content: Movable type technology made its first appearances in Asia around 1000 AD, hundreds of years before Europe. Around 1450, Johannes Gutenberg, a goldsmith based in Mainz, introduced the metal movable-type printing presses in Europe starting the Printing Revolution.

Think about it: if you ask yourself what actually movable type's pioneers invented, you will not easily find an “object” to imagine. Presses, paper, ink, metal stamps, writing, books: they were already there. Can we name more precisely their invention? Of course: they made the continuous surface of Writing *discrete*, which means consisting of separated elements.

We could state that making something discrete is defining an atom or a set of rules which will reduce substantially the possibilities allowed by the system: from the widest infinite set of options to a narrower infinite set of options. It means setting one or more thresholds that will define unambiguously which information will be discarded or not. Take for example the scale plans in architecture: the 1 to *something* value defines the threshold in representation which sets the amount of information and detail conveyed by the image.

How could a loss of detail and options be a good thing? Well, the idea is to discard what we don’t need to achieve a certain goal, in order to make our process more efficient. Fewer options mean quicker transformations, fewer data to transfer, quicker testing, and so on.

In different words, movable type reduces the inexhaustible possibilities of Writing to speed up the arrangement and reproduction of lines of text. The loss in composition freedom was substantial, but the gain in speed and ease of production was huge.
----
#### image ####
name: medievalVGutenberg.svg
----
class: large-image
----
#### image ####
name: illustrationVStypography.svg
----
class: small-image
----
#### text-block ####
content: If we focus on Europe, where languages are mostly written using the Latin alphabet, the reduction meant that Gutenberg had to identify and select the most occurring components of Writing – in his context the letters of the Latin alphabet – and make them fit into a box according to a number of restrictions. These restrictions were supposed to make these boxes interchangeable. Everything else outside this selection of elements started to be treated as an illustration, carved in wooden blocks and kept separate from “text”.

Ok, but… the letters were already separate things before movable type, right? A is A, B is B, and so on. That’s true, but when one writes, say, by hand, the surface is not sliced, it is continuous. If we compare Writing to Music, this is probably easier to understand. Typography, like any visual arrangement, consists of as much white as black. It’s not black on white, it’s black AND white. It’s as much ink as paper. As many active pixels as inactive ones. As much fill as void. Now, transpose this to Music. What would be a note without the absence of sound surrounding it? The absence of sound contributes to the construction of the meaning as well as the presence of sound. What would be a typographic composition without the white surrounding the black? Just some messy spots of ink.
----
#### image ####
name: hello.svg
----
class: large-image
----
#### text-block ####
content: Movable type allows to break the continuum of Writing into rectangles of regular height. Because of production constraints, the graphism (the black shape) needs to be entirely contained into a box. The easiest and more logic way to do so was to cut between each black shape. This means that if the graphism is untouched, the void (white) needs to be sliced in different pieces and distributed across the boxes.
----
#### image ####
name: space-glyph.svg
----
class: large-image
----
#### text-block ####
content: This re-organization of the surface of Writing is condensed and represented in a tool that Gutenberg actually invented: the adjustable mould. This tool allowed him to cast many little lead boxes with the same height but different width. Here follows a synthetic scheme of the process:
----
#### image ####
name: mould.svg
----
class: large-image
----
#### section-title ####
content: Digital Typesetting, from Solid to Virtual Boxes
----
class: default
----
#### text-block ####
content: Digital typesetting freed Typography from the physical limits of metal type. Even if it transported  type from a three-dimensional to a two-dimensional one, it shares with its old ancestor the same strain for modularity and some customs.
----
#### image ####
name: avatar.svg
----
class: large-image
----
#### image ####
name: body.svg
----
class: small-image
----
#### text-block ####
content: For example, given that metal type consisted of physical elements used as bricks forming a wall of prefabricated letters, it made sense to keep track of the height of the box instead of the height of the glyphs represented in the box. This custom is still in use nowadays even if the boxes are completely virtual. Take this aspect into account when comparing two different fonts. Often, even if you use the same body size, the resulting letters will not be of the same height.
----
#### image ####
name: same-body.svg
----
class: large-image
----
#### section-title ####
content: Characters and Mapping
----
class: default
----
#### text-block ####
content: Before exploring the realm of typesetting in Python, we need to learn how Python treats text data. Computers in general need to encode any kind of information down into binary notation. Text is not an exception. The way this encoding issue was originally solved is based on the alphabet and is therefore Western-centric. Each text element such as letters, digits, symbols, punctuation, white spaces and control elements as *new line* or *delete* was assigned to a number. The weird thing is that each component of a standard typographer case received a value. For example, *A* and *a* got a different value even if they represent the same letter in a different drawing structure. This is not a big deal with Latin, but this approach had serious consequences when mapping Hangul, Arabic and many non-alphabetical scripts.
----
#### image ####
name: decimal-binar.svg
----
class: large-image
----
#### text-block ####
content: The process of mapping a character to a number is called encoding. Morse Code is a very old kind of encoding. One of the oldest and most widespread standard for text encoding for the computer era is the (in)famous ASCII (American Standard Code for Information Interchange). Its origin goes way back to telegraph communication.

Because of its heritage and its special relation with the English language, ASCII characters are represented using a 7 bit integer value, meaning that the maximum index available in the mapping can be described with a binary number made of 7 digits.
----
#### table ####
path: 01.csv
----
headers: 1
----
#### code-example ####
snippet: 01.py
----
#### text-block ####
content: If we include the 0, the available indexes sum up to 128 options.
----
#### image ####
name: us-ascii.svg
----
class: large-image
----
#### text-block ####
content: When 8-bit bytes became the standard in computing, each character started to be represented with an 8-digit binary number (1 byte). This opened up the mapping to 256 options.
----
#### table ####
path: 02.csv
----
headers: 1
----
#### code-example ####
snippet: 01_01.py
----
#### text-block ####
content: This space of the mapping was often implemented in different ways across different operating systems, such as Apple (macOS Roman), IBM and Microsoft (ISO 8859) and countries. Exchanging information across different computers became more difficult, until the Unicode Consortium managed to create a new wider OS-independent mapping standard. The Unicode Consortium finally began to look beyond English speaking countries. The last bit of the first byte was then fixed to ISO LATIN 1 as you see in the following diagram.
----
#### image ####
name: ISOLATIN1.svg
----
class: large-image
----
#### text-block ####
content: Each character in the Unicode mapping can be represented as two bytes opening the mapping options to 65,536. The mapping can be extended beyond the two bytes, in fact emojis are stored in a supplementary multilingual plane which starts just after U+FFFF. We will sometimes refer to the Unicode mapping using the abbreviation UTF-8, which is a clever way to represent Unicode characters saving data according to their position into the mapping.
----
#### section-title ####
content: Text Data in Python
----
class: default
----
#### text-block ####
content: After this lengthy preamble, it is time to ask: how do we relate with text data using Python? In the specific scenario of this manual, we will use the standard Python string object to create, store and manipulate text. Then we will use DrawBot to typeset the text onto a PDF canvas.

The Python string, like tuples and lists, is a sequence: a collection of values where order is significant. Tuples and lists are generic containers: they can store any kind of data. A string is especially designed for representing immutable sequences of text characters. A schematic representation of a string could be
----
#### image ####
name: hello-access.svg
----
class: large-image
----
#### text-block ####
content: Sequence indexing starts from the 0. Meaning that a string of n elements has the elements indexed from 0 to n-1 inclusive. 
A string can be created using single <code>'</code> (U+0022) or double <code>"</code> (U+0027) straight quotes. Two options are convenient in case you need to insert a delimiter character into the string representation:
----
#### code-example ####
snippet: 02.py
----
#### text-block ####
content: Otherwise, an escape backslash character can be used to inform the interpreter that the character following the backslash is not the end of the sequence but part of it:
----
#### code-example ####
snippet: 03.py
----
#### text-block ####
content: Other commonly escaped characters are the newline (<code>\n</code>) and the tab (<code>\t</code>). In addition, Python supports triple quotes string declaration for strings which embed newline characters naturally. These are used especially for code documentation purposes.
----
#### code-example ####
snippet: 04.py
----
#### text-block ####
content: As said before, each character is mapped to a numerical value according to the Unicode standard. Python provides the built-in function <code>ord()</code> to get the position of a character within the standard mapping.
----
#### code-example ####
snippet: 05.py
----
#### text-block ####
content: Conversely, Python gives the possibility to access a mapping position using an integer value through the <code>chr()</code> function. Given that each number is assigned to one and only character, using 192 as input value we will obtain:
----
#### code-example ####
snippet: 06.py
----
#### text-block ####
content: References to unicode characters are rarely made using their base 10 value. As we said, most of the characters have a two bytes representation, which can be represented conveniently with a four digits hexadecimal number, as:
----
#### table ####
path: 03.csv
----
headers: 1
----
#### text-block ####
content: These notation can also be included in Python string declaration using the <code>\u</code> escape literal:
----
#### code-example ####
snippet: 07.py
----
#### text-block ####
content: Strings, as the other basic data types, have a built-in constructor function named <code>str()</code>. This function allows the conversion of a different type of object into a string. It accepts almost any kind of object, but it has a limited range of options.
----
#### code-example ####
snippet: 08.py
----
#### text-block ####
content: Way more detailed conversion methods are explained into [Transform Strings](/transform-strings/).

As mentioned before, strings are sequences. Python provides a specific syntax to perform some basic sequence operations like accessing, slicing, checking inclusion, test for equivalence and concatenation.
----
#### section-title ####
content: Accessing
----
class: default
----
#### text-block ####
content: It is possible to access the content of a sequence using an index from 0 to the sequence length minus 1.
----
#### code-example ####
snippet: 09.py
----
#### text-block ####
content: Python gives also the possibility to use a negative index. This could be read as *sequence length minus index*. It’s like starting from the end. For example:
----
#### code-example ####
snippet: 10.py
----
#### image ####
name: hello-access-negative.svg
----
class: large-image
----
#### text-block ####
content: Take into account that providing an index equal or higher than the sequence length will cause an <code>IndexError</code> during runtime.
----
#### section-title ####
content: Slicing
----
class: default
----
#### text-block ####
content: You can create a sub-sequence deep copy using an extension of the accessing syntax. It works like this:
----
#### code-example ####
snippet: 11.py
----
#### text-block ####
content: Remember that end is the index of the first value not to be included into the subsequence.
----
#### code-example ####
snippet: 12.py
----
#### image ####
name: startEndStep.svg
----
class: large-image
----
#### text-block ####
content: The arguments can be omitted in order to make them implicit, in the following way:
----
#### code-example ####
snippet: 13.py
----
#### text-block ####
content: As for the accessing syntax, start and end can have a negative value.
----
#### code-example ####
snippet: 14.py
----
#### image ####
name: endStep.svg
----
class: large-image
----
#### section-title ####
content: Checking inclusion
----
class: default
----
#### code-example ####
snippet: 15.py
----
#### text-block ####
content: It triggers a boolean expression able to verify whether a sequence contains a value or not. For example:
----
#### code-example ####
snippet: 16.py
----
#### text-block ####
content: This expression can accept sub-sequences as
----
#### code-example ####
snippet: 17.py
----
#### section-title ####
content: Test equality
----
class: default
----
#### text-block ####
content: If you need to compare the content of two different strings, you should use the equality operators.
----
#### code-example ####
snippet: 18.py
----
#### text-block ####
content: Beware of identity operators. Short strings are heavily cached; therefore their identity is not reliable. So, always prefer <code>'Meooow' != 'meooow'</code> to <code>'Meooow' is not 'meooow'</code>.
----
#### section-title ####
content: Natural order
----
class: default
----
#### text-block ####
content: The following operators can be helpful to determine how two strings relate according to a lexicographical order.
----
#### code-example ####
snippet: 19.py
----
#### text-block ####
content: Why not alphabetical? We could consider “lexicographical” as a wider notion of alphabetical, where the sorting references a set of characters wider than the Latin alphabet. Think for a moment what would happen if you ask the interpreter which one comes first between some Latin and some Cyrillic characters? The reference character set is the Unicode mapping. Let’s consider:
----
#### code-example ####
snippet: 20.py
----
#### text-block ####
content: In order to solve such expression, Python converts each character into its integer unicode representation, and then evaluates their order starting from left
----
#### code-example ####
snippet: 21.py
----
#### image ####
name: evaluateHat.svg
----
class: large-image
----
#### text-block ####
content: The first two character representations are equal, but the third one (<code>b</code> vs. <code>t</code>) is not, meaning that <code>"habit"</code> is inferior to <code>"hat"</code>. In fact the expression evaluates to <code>True</code>. This applies to our common notion of alphabetical order. Then consider the following
----
#### code-example ####
snippet: 22.py
----
#### text-block ####
content: We would also expect this expression evaluates to True, because the <code>'b'</code> comes before <code>'m'</code> in the Latin alphabet. Well, not really. Because the uppercase <code>'M'</code> comes before the lowercase <code>'b'</code> in the Unicode mapping. I know it doesn’t make sense at first sight, but if capital and lowercase characters occupy two different spots into the encoding, this is somehow a mandatory behaviour. Let’s check the numbers:
----
#### code-example ####
snippet: 23.py
----
#### text-block ####
content: Which means that
----
#### code-example ####
snippet: 24.py
----
#### section-title ####
content: Concatenation
----
class: default
----
#### text-block ####
content: Python allows the concatenation of sequences using the <code>+</code> and <code>*</code> operators. For example
----
#### code-example ####
snippet: 25.py
----
#### text-block ####
content: Note that a sequence can be multiplied only by an integer value, no floating points allowed. Note that this operation is not memory efficient. If you need to concatenate intensively, consider using the string <code>.join()</code> method.
----
---
hasTocNumber: yes
